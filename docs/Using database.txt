Klasy, które dziedzicz¹ po klasie RealmObject s¹ obiektami bazy danych.

Korzystanie z nich w kodzie wymaga najpierw utworzenia obiektu Realm. Ze wzglêdu na pewne komplikacje do³¹czam
inicjacje bazy danychm która zadzia³a w mmoim przypadku (gdy¿ niektóre znalezione w internecie zwyczajnie rzuca³y b³êdy):

private Realm realm; // jako pole prywatne

// w onCreate()
Realm.init(getApplicationContext());
RealmConfiguration configuration = new RealmConfiguration.Builder().build();
Realm.setDefaultConfiguration(configuration);
realm = Realm.getDefaultInstance();

Standardowe operacje na obiektach w bazie wykonujemy za pomoc¹:

realm.beginTransaction();
// operacje na obiektach dziedzicz¹cych po RealmObject
//stworzenie obiektu
(Klasa) nazwa = realm.createObject((Klasa).class);
realm.commitTransaction();

Je¶li chcemy, aby transakcja by³a asynchroniczna (raczej bêdziemy chcieli) to wygl±da to trochê inaczej:

realm.executeTransactionAsync(new Realm.Transaction() {
            @Override
            public void execute(Realm bgRealm) {
                //operacje na obiektach dziedzicz±cych po RealmObject
				//stworzenie obiektu
				(Klasa) nazwa = realm.createObject((Klasa).class);
            }
        }, new Realm.Transaction.OnSuccess() {
            @Override
            public void onSuccess() {
                // Transaction was a success.
            }
        }, new Realm.Transaction.OnError() {
            @Override
            public void onError(Throwable error) {
                // Transaction failed and was automatically canceled.
            }
        });

Dokumentacja Realma: https://realm.io/docs/

